// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	ebpf "github.com/cilium/ebpf"
	mock "github.com/stretchr/testify/mock"
)

// MockeBPFProg is an autogenerated mock type for the eBPFProg type
type MockeBPFProg struct {
	mock.Mock
}

type MockeBPFProg_Expecter struct {
	mock *mock.Mock
}

func (_m *MockeBPFProg) EXPECT() *MockeBPFProg_Expecter {
	return &MockeBPFProg_Expecter{mock: &_m.Mock}
}

// AttachXDPToNetDevice provides a mock function with given fields: ndev
func (_m *MockeBPFProg) AttachXDPToNetDevice(ndev int) error {
	ret := _m.Called(ndev)

	if len(ret) == 0 {
		panic("no return value specified for AttachXDPToNetDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ndev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeBPFProg_AttachXDPToNetDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachXDPToNetDevice'
type MockeBPFProg_AttachXDPToNetDevice_Call struct {
	*mock.Call
}

// AttachXDPToNetDevice is a helper method to define mock.On call
//   - ndev int
func (_e *MockeBPFProg_Expecter) AttachXDPToNetDevice(ndev interface{}) *MockeBPFProg_AttachXDPToNetDevice_Call {
	return &MockeBPFProg_AttachXDPToNetDevice_Call{Call: _e.mock.On("AttachXDPToNetDevice", ndev)}
}

func (_c *MockeBPFProg_AttachXDPToNetDevice_Call) Run(run func(ndev int)) *MockeBPFProg_AttachXDPToNetDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeBPFProg_AttachXDPToNetDevice_Call) Return(_a0 error) *MockeBPFProg_AttachXDPToNetDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeBPFProg_AttachXDPToNetDevice_Call) RunAndReturn(run func(int) error) *MockeBPFProg_AttachXDPToNetDevice_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockeBPFProg) Close() {
	_m.Called()
}

// MockeBPFProg_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockeBPFProg_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockeBPFProg_Expecter) Close() *MockeBPFProg_Close_Call {
	return &MockeBPFProg_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockeBPFProg_Close_Call) Run(run func()) *MockeBPFProg_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeBPFProg_Close_Call) Return() *MockeBPFProg_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeBPFProg_Close_Call) RunAndReturn(run func()) *MockeBPFProg_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ForceDetachXDP provides a mock function with given fields: ndev
func (_m *MockeBPFProg) ForceDetachXDP(ndev int) {
	_m.Called(ndev)
}

// MockeBPFProg_ForceDetachXDP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceDetachXDP'
type MockeBPFProg_ForceDetachXDP_Call struct {
	*mock.Call
}

// ForceDetachXDP is a helper method to define mock.On call
//   - ndev int
func (_e *MockeBPFProg_Expecter) ForceDetachXDP(ndev interface{}) *MockeBPFProg_ForceDetachXDP_Call {
	return &MockeBPFProg_ForceDetachXDP_Call{Call: _e.mock.On("ForceDetachXDP", ndev)}
}

func (_c *MockeBPFProg_ForceDetachXDP_Call) Run(run func(ndev int)) *MockeBPFProg_ForceDetachXDP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeBPFProg_ForceDetachXDP_Call) Return() *MockeBPFProg_ForceDetachXDP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeBPFProg_ForceDetachXDP_Call) RunAndReturn(run func(int)) *MockeBPFProg_ForceDetachXDP_Call {
	_c.Call.Return(run)
	return _c
}

// GetDropMap provides a mock function with given fields:
func (_m *MockeBPFProg) GetDropMap() *ebpf.Map {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDropMap")
	}

	var r0 *ebpf.Map
	if rf, ok := ret.Get(0).(func() *ebpf.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebpf.Map)
		}
	}

	return r0
}

// MockeBPFProg_GetDropMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDropMap'
type MockeBPFProg_GetDropMap_Call struct {
	*mock.Call
}

// GetDropMap is a helper method to define mock.On call
func (_e *MockeBPFProg_Expecter) GetDropMap() *MockeBPFProg_GetDropMap_Call {
	return &MockeBPFProg_GetDropMap_Call{Call: _e.mock.On("GetDropMap")}
}

func (_c *MockeBPFProg_GetDropMap_Call) Run(run func()) *MockeBPFProg_GetDropMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeBPFProg_GetDropMap_Call) Return(_a0 *ebpf.Map) *MockeBPFProg_GetDropMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeBPFProg_GetDropMap_Call) RunAndReturn(run func() *ebpf.Map) *MockeBPFProg_GetDropMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatsMap provides a mock function with given fields:
func (_m *MockeBPFProg) GetStatsMap() *ebpf.Map {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatsMap")
	}

	var r0 *ebpf.Map
	if rf, ok := ret.Get(0).(func() *ebpf.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebpf.Map)
		}
	}

	return r0
}

// MockeBPFProg_GetStatsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatsMap'
type MockeBPFProg_GetStatsMap_Call struct {
	*mock.Call
}

// GetStatsMap is a helper method to define mock.On call
func (_e *MockeBPFProg_Expecter) GetStatsMap() *MockeBPFProg_GetStatsMap_Call {
	return &MockeBPFProg_GetStatsMap_Call{Call: _e.mock.On("GetStatsMap")}
}

func (_c *MockeBPFProg_GetStatsMap_Call) Run(run func()) *MockeBPFProg_GetStatsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeBPFProg_GetStatsMap_Call) Return(_a0 *ebpf.Map) *MockeBPFProg_GetStatsMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeBPFProg_GetStatsMap_Call) RunAndReturn(run func() *ebpf.Map) *MockeBPFProg_GetStatsMap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockeBPFProg creates a new instance of MockeBPFProg. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockeBPFProg(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeBPFProg {
	mock := &MockeBPFProg{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
