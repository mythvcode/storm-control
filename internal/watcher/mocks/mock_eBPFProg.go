// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	ebpfloader "github.com/mythvcode/storm-control/internal/ebpfloader"
	mock "github.com/stretchr/testify/mock"
)

// MockeBPFProg is an autogenerated mock type for the eBPFProg type
type MockeBPFProg struct {
	mock.Mock
}

type MockeBPFProg_Expecter struct {
	mock *mock.Mock
}

func (_m *MockeBPFProg) EXPECT() *MockeBPFProg_Expecter {
	return &MockeBPFProg_Expecter{mock: &_m.Mock}
}

// AttachXDP provides a mock function with given fields: devIndex
func (_m *MockeBPFProg) AttachXDP(devIndex int) error {
	ret := _m.Called(devIndex)

	if len(ret) == 0 {
		panic("no return value specified for AttachXDP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(devIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeBPFProg_AttachXDP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachXDP'
type MockeBPFProg_AttachXDP_Call struct {
	*mock.Call
}

// AttachXDP is a helper method to define mock.On call
//   - devIndex int
func (_e *MockeBPFProg_Expecter) AttachXDP(devIndex interface{}) *MockeBPFProg_AttachXDP_Call {
	return &MockeBPFProg_AttachXDP_Call{Call: _e.mock.On("AttachXDP", devIndex)}
}

func (_c *MockeBPFProg_AttachXDP_Call) Run(run func(devIndex int)) *MockeBPFProg_AttachXDP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeBPFProg_AttachXDP_Call) Return(_a0 error) *MockeBPFProg_AttachXDP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeBPFProg_AttachXDP_Call) RunAndReturn(run func(int) error) *MockeBPFProg_AttachXDP_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockeBPFProg) Close() {
	_m.Called()
}

// MockeBPFProg_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockeBPFProg_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockeBPFProg_Expecter) Close() *MockeBPFProg_Close_Call {
	return &MockeBPFProg_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockeBPFProg_Close_Call) Run(run func()) *MockeBPFProg_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeBPFProg_Close_Call) Return() *MockeBPFProg_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeBPFProg_Close_Call) RunAndReturn(run func()) *MockeBPFProg_Close_Call {
	_c.Run(run)
	return _c
}

// ForceDetachXDP provides a mock function with given fields: devIndex
func (_m *MockeBPFProg) ForceDetachXDP(devIndex int) {
	_m.Called(devIndex)
}

// MockeBPFProg_ForceDetachXDP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceDetachXDP'
type MockeBPFProg_ForceDetachXDP_Call struct {
	*mock.Call
}

// ForceDetachXDP is a helper method to define mock.On call
//   - devIndex int
func (_e *MockeBPFProg_Expecter) ForceDetachXDP(devIndex interface{}) *MockeBPFProg_ForceDetachXDP_Call {
	return &MockeBPFProg_ForceDetachXDP_Call{Call: _e.mock.On("ForceDetachXDP", devIndex)}
}

func (_c *MockeBPFProg_ForceDetachXDP_Call) Run(run func(devIndex int)) *MockeBPFProg_ForceDetachXDP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeBPFProg_ForceDetachXDP_Call) Return() *MockeBPFProg_ForceDetachXDP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeBPFProg_ForceDetachXDP_Call) RunAndReturn(run func(int)) *MockeBPFProg_ForceDetachXDP_Call {
	_c.Run(run)
	return _c
}

// GetDevDropCfg provides a mock function with given fields: devIndex
func (_m *MockeBPFProg) GetDevDropCfg(devIndex int) (ebpfloader.DropPKT, error) {
	ret := _m.Called(devIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetDevDropCfg")
	}

	var r0 ebpfloader.DropPKT
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (ebpfloader.DropPKT, error)); ok {
		return rf(devIndex)
	}
	if rf, ok := ret.Get(0).(func(int) ebpfloader.DropPKT); ok {
		r0 = rf(devIndex)
	} else {
		r0 = ret.Get(0).(ebpfloader.DropPKT)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(devIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockeBPFProg_GetDevDropCfg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevDropCfg'
type MockeBPFProg_GetDevDropCfg_Call struct {
	*mock.Call
}

// GetDevDropCfg is a helper method to define mock.On call
//   - devIndex int
func (_e *MockeBPFProg_Expecter) GetDevDropCfg(devIndex interface{}) *MockeBPFProg_GetDevDropCfg_Call {
	return &MockeBPFProg_GetDevDropCfg_Call{Call: _e.mock.On("GetDevDropCfg", devIndex)}
}

func (_c *MockeBPFProg_GetDevDropCfg_Call) Run(run func(devIndex int)) *MockeBPFProg_GetDevDropCfg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeBPFProg_GetDevDropCfg_Call) Return(_a0 ebpfloader.DropPKT, _a1 error) *MockeBPFProg_GetDevDropCfg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockeBPFProg_GetDevDropCfg_Call) RunAndReturn(run func(int) (ebpfloader.DropPKT, error)) *MockeBPFProg_GetDevDropCfg_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevStat provides a mock function with given fields: devIndex
func (_m *MockeBPFProg) GetDevStat(devIndex int) (ebpfloader.PacketCounter, error) {
	ret := _m.Called(devIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetDevStat")
	}

	var r0 ebpfloader.PacketCounter
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (ebpfloader.PacketCounter, error)); ok {
		return rf(devIndex)
	}
	if rf, ok := ret.Get(0).(func(int) ebpfloader.PacketCounter); ok {
		r0 = rf(devIndex)
	} else {
		r0 = ret.Get(0).(ebpfloader.PacketCounter)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(devIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockeBPFProg_GetDevStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevStat'
type MockeBPFProg_GetDevStat_Call struct {
	*mock.Call
}

// GetDevStat is a helper method to define mock.On call
//   - devIndex int
func (_e *MockeBPFProg_Expecter) GetDevStat(devIndex interface{}) *MockeBPFProg_GetDevStat_Call {
	return &MockeBPFProg_GetDevStat_Call{Call: _e.mock.On("GetDevStat", devIndex)}
}

func (_c *MockeBPFProg_GetDevStat_Call) Run(run func(devIndex int)) *MockeBPFProg_GetDevStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeBPFProg_GetDevStat_Call) Return(_a0 ebpfloader.PacketCounter, _a1 error) *MockeBPFProg_GetDevStat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockeBPFProg_GetDevStat_Call) RunAndReturn(run func(int) (ebpfloader.PacketCounter, error)) *MockeBPFProg_GetDevStat_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevDropCfg provides a mock function with given fields: devIndex, cfg
func (_m *MockeBPFProg) UpdateDevDropCfg(devIndex int, cfg ebpfloader.DropPKT) error {
	ret := _m.Called(devIndex, cfg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevDropCfg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, ebpfloader.DropPKT) error); ok {
		r0 = rf(devIndex, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeBPFProg_UpdateDevDropCfg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevDropCfg'
type MockeBPFProg_UpdateDevDropCfg_Call struct {
	*mock.Call
}

// UpdateDevDropCfg is a helper method to define mock.On call
//   - devIndex int
//   - cfg ebpfloader.DropPKT
func (_e *MockeBPFProg_Expecter) UpdateDevDropCfg(devIndex interface{}, cfg interface{}) *MockeBPFProg_UpdateDevDropCfg_Call {
	return &MockeBPFProg_UpdateDevDropCfg_Call{Call: _e.mock.On("UpdateDevDropCfg", devIndex, cfg)}
}

func (_c *MockeBPFProg_UpdateDevDropCfg_Call) Run(run func(devIndex int, cfg ebpfloader.DropPKT)) *MockeBPFProg_UpdateDevDropCfg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(ebpfloader.DropPKT))
	})
	return _c
}

func (_c *MockeBPFProg_UpdateDevDropCfg_Call) Return(_a0 error) *MockeBPFProg_UpdateDevDropCfg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeBPFProg_UpdateDevDropCfg_Call) RunAndReturn(run func(int, ebpfloader.DropPKT) error) *MockeBPFProg_UpdateDevDropCfg_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockeBPFProg creates a new instance of MockeBPFProg. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockeBPFProg(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeBPFProg {
	mock := &MockeBPFProg{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
