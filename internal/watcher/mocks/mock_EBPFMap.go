// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	ebpf "github.com/cilium/ebpf"
	mock "github.com/stretchr/testify/mock"
)

// MockEBPFMap is an autogenerated mock type for the EBPFMap type
type MockEBPFMap struct {
	mock.Mock
}

type MockEBPFMap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEBPFMap) EXPECT() *MockEBPFMap_Expecter {
	return &MockEBPFMap_Expecter{mock: &_m.Mock}
}

// Lookup provides a mock function with given fields: key, valueOut
func (_m *MockEBPFMap) Lookup(key interface{}, valueOut interface{}) error {
	ret := _m.Called(key, valueOut)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(key, valueOut)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEBPFMap_Lookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lookup'
type MockEBPFMap_Lookup_Call struct {
	*mock.Call
}

// Lookup is a helper method to define mock.On call
//   - key interface{}
//   - valueOut interface{}
func (_e *MockEBPFMap_Expecter) Lookup(key interface{}, valueOut interface{}) *MockEBPFMap_Lookup_Call {
	return &MockEBPFMap_Lookup_Call{Call: _e.mock.On("Lookup", key, valueOut)}
}

func (_c *MockEBPFMap_Lookup_Call) Run(run func(key interface{}, valueOut interface{})) *MockEBPFMap_Lookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEBPFMap_Lookup_Call) Return(_a0 error) *MockEBPFMap_Lookup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEBPFMap_Lookup_Call) RunAndReturn(run func(interface{}, interface{}) error) *MockEBPFMap_Lookup_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: key, value, flags
func (_m *MockEBPFMap) Update(key interface{}, value interface{}, flags ebpf.MapUpdateFlags) error {
	ret := _m.Called(key, value, flags)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ebpf.MapUpdateFlags) error); ok {
		r0 = rf(key, value, flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEBPFMap_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEBPFMap_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key interface{}
//   - value interface{}
//   - flags ebpf.MapUpdateFlags
func (_e *MockEBPFMap_Expecter) Update(key interface{}, value interface{}, flags interface{}) *MockEBPFMap_Update_Call {
	return &MockEBPFMap_Update_Call{Call: _e.mock.On("Update", key, value, flags)}
}

func (_c *MockEBPFMap_Update_Call) Run(run func(key interface{}, value interface{}, flags ebpf.MapUpdateFlags)) *MockEBPFMap_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}), args[2].(ebpf.MapUpdateFlags))
	})
	return _c
}

func (_c *MockEBPFMap_Update_Call) Return(_a0 error) *MockEBPFMap_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEBPFMap_Update_Call) RunAndReturn(run func(interface{}, interface{}, ebpf.MapUpdateFlags) error) *MockEBPFMap_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEBPFMap creates a new instance of MockEBPFMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEBPFMap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEBPFMap {
	mock := &MockEBPFMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
